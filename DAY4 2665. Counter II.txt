DAY4 2665. Counter II

URL(https://leetcode.com/problems/counter-ii/description/?envType=study-plan-v2&envId=30-days-of-javascript)

solution:

/**
 * @param {integer} init
 * @return { increment: Function, decrement: Function, reset: Function }
 */
var createCounter = function(init) {
    let value = init;
    
    return{
        increment: function(){
           value += 1;
           return value; 
        },
        reset: function(){
           value = init;
           return value; 
        },
        decrement: function(){
           value -= 1;
           return value; 
        }
    }

};

/**
 * const counter = createCounter(5)
 * counter.increment(); // 6
 * counter.reset(); // 5
 * counter.decrement(); // 4
 */


Approch : create three method that will increment, reset and decrement by inital value
In this we can use closure.

Note : we create a closuer varible and access to shared copy of thier inner function, and then create thre function and return in object.